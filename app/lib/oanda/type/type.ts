import * as Account from './account';
import * as Instrument from './instrument';
import * as Order from './order';
import * as Position from './position';
import * as Pricing from './pricing';
import * as PricingCommon from './pricing-common';
import * as Primitives from './primitives';
import * as Trade from './trade';
import * as Transaction from './transaction';

export namespace Oanda {
  export type DecimalNumber = Primitives.DecimalNumber;
  export type AccountUnits = Primitives.AccountUnits;
  export type Currency = Primitives.Currency;
  export type Tag = Primitives.Tag;
  export type InstrumentName = Primitives.InstrumentName;
  export type InstrumentType = Primitives.InstrumentType;
  export type DayOfWeek = Primitives.DayOfWeek;
  export type FinancingDayOfWeek = Primitives.FinancingDayOfWeek;
  export type InstrumentFinancing = Primitives.InstrumentFinancing;
  export type Instrument = Primitives.Instrument;
  export type DateTime = Primitives.DateTime;
  export type AcceptDatetimeFormat = Primitives.AcceptDatetimeFormat;
  export type InstrumentCommission = Primitives.InstrumentCommission;
  export type GuaranteedStopLossOrderModeForInstrument = Primitives.GuaranteedStopLossOrderModeForInstrument;
  export type GuaranteedStopLossOrderLevelRestriction = Primitives.GuaranteedStopLossOrderLevelRestriction;
  export type Direction = Primitives.Direction;
  export type PricingComponent = Primitives.PricingComponent;
  export type ConversionFactor = Primitives.ConversionFactor;
  export type HomeConversionFactors = Primitives.HomeConversionFactors;

  export type AccountID = Account.AccountID;
  export type Account = Account.Account;
  export type AccountChangesState = Account.AccountChangesState;
  export type AccountProperties = Account.AccountProperties;
  export type GuaranteedStopLossOrderParameters = Account.GuaranteedStopLossOrderParameters;
  export type GuaranteedStopLossOrderMode = Account.GuaranteedStopLossOrderMode;
  export type GuaranteedStopLossOrderMutability = Account.GuaranteedStopLossOrderMutability;
  export type AccountSummary = Account.AccountSummary;
  export type AccumulatedAccountState = Account.AccumulatedAccountState;
  export type CalculatedAccountState = Account.CalculatedAccountState;
  export type AccountChanges = Account.AccountChanges;
  export type AccountFinancingMode = Account.AccountFinancingMode;
  export type UserAttributes = Account.UserAttributes;
  export type PositionAggregationMode = Account.PositionAggregationMode;


  export type CandlestickGranularity = Instrument.CandlestickGranularity;
  export type WeeklyAlignment = Instrument.WeeklyAlignment;
  export type Candlestick = Instrument.Candlestick;
  export type CandlestickData = Instrument.CandlestickData;
  export type CandlestickResponse = Instrument.CandlestickResponse;
  export type OrderBook = Instrument.OrderBook;
  export type OrderBookBucket = Instrument.OrderBookBucket;
  export type PositionBook = Instrument.PositionBook;
  export type PositionBookBucket = Instrument.PositionBookBucket;

  export type Order = Order.Order;
  export type OrderState = Order.OrderState;
  export type MarketOrder = Order.MarketOrder;
  export type FixedPriceOrder = Order.FixedPriceOrder;
  export type LimitOrder = Order.LimitOrder;
  export type StopOrder = Order.StopOrder;
  export type MarketIfTouchedOrder = Order.MarketIfTouchedOrder;
  export type TakeProfitOrder = Order.TakeProfitOrder;
  export type StopLossOrder = Order.StopLossOrder;
  export type GuaranteedStopLossOrder = Order.GuaranteedStopLossOrder;
  export type TrailingStopLossOrder = Order.TrailingStopLossOrder;
  export type MarketOrderRequest = Order.MarketOrderRequest;
  export type LimitOrderRequest = Order.LimitOrderRequest;
  export type StopOrderRequest = Order.StopOrderRequest;
  export type MarketIfTouchedOrderRequest = Order.MarketIfTouchedOrderRequest;
  export type TakeProfitOrderRequest = Order.TakeProfitOrderRequest;
  export type StopLossOrderRequest = Order.StopLossOrderRequest;
  export type GuaranteedStopLossOrderRequest = Order.GuaranteedStopLossOrderRequest;
  export type TrailingStopLossOrderRequest = Order.TrailingStopLossOrderRequest;
  export type OrderID = Order.OrderID;
  export type OrderType = Order.OrderType;
  export type CancellableOrderType = Order.CancellableOrderType;
  export type OrderStateFilter = Order.OrderStateFilter;
  export type OrderIdentifier = Order.OrderIdentifier;
  export type OrderSpecifier = Order.OrderSpecifier;
  export type TimeInForce = Order.TimeInForce;
  export type OrderPositionFill = Order.OrderPositionFill;
  export type OrderTriggerCondition = Order.OrderTriggerCondition;
  export type DynamicOrderState = Order.DynamicOrderState;
  export type UnitsAvailableDetails = Order.UnitsAvailableDetails;
  export type UnitsAvailable = Order.UnitsAvailable;
  export type GuaranteedStopLossOrderEntryData = Order.GuaranteedStopLossOrderEntryData;

  export type Position = Position.Position;
  export type PositionSide = Position.PositionSide;
  export type CalculatedPositionState = Position.CalculatedPositionState;

  export type PriceValue = PricingCommon.PriceValue;
  export type PriceBucket = PricingCommon.PriceBucket;

  export type Price = Pricing.Price;
  export type PriceStatus = Pricing.PriceStatus;
  export type QuoteHomeConversionFactors = Pricing.QuoteHomeConversionFactors;
  export type HomeConversions = Pricing.HomeConversions;
  export type PricingHeartbeat = Pricing.PricingHeartbeat;
  export type CandleSpecification = Pricing.CandleSpecification;

  export type TradeID = Trade.TradeID;
  export type TradeState = Trade.TradeState;
  export type TradeStateFilter = Trade.TradeStateFilter;
  export type TradeSpecifier = Trade.TradeSpecifier;
  export type Trade = Trade.Trade;
  export type TradeSummary = Trade.TradeSummary;
  export type CalculatedTradeState = Trade.CalculatedTradeState;
  export type TakeProfitDetails = Trade.TakeProfitDetails;
  export type TradePL = Trade.TradePL;

  export type Transaction = Transaction.Transaction;
  export type CreateTransaction = Transaction.CreateTransaction;
  export type CloseTransaction = Transaction.CloseTransaction;
  export type ReopenTransaction = Transaction.ReopenTransaction;
  export type ClientConfigureTransaction = Transaction.ClientConfigureTransaction;
  export type ClientConfigureRejectTransaction = Transaction.ClientConfigureRejectTransaction;
  export type TransferfundsTransaction = Transaction.TransferfundsTransaction;
  export type TransferFundsRejectTransaction = Transaction.TransferFundsRejectTransaction;
  export type MarketOrderTransaction = Transaction.MarketOrderTransaction;
  export type MarketOrderRejectTransaction = Transaction.MarketOrderRejectTransaction;
  export type FixedPriceOrderTransaction = Transaction.FixedPriceOrderTransaction;
  export type LimitOrderTransaction = Transaction.LimitOrderTransaction;
  export type LimitOrderRejectTransaction = Transaction.LimitOrderRejectTransaction;
  export type StopOrderTransactoin = Transaction.StopOrderTransactoin;
  export type StopOrderRejectTransaction = Transaction.StopOrderRejectTransaction;
  export type MarketIfTouchedOrderTransaction = Transaction.MarketIfTouchedOrderTransaction;
  export type MarketIfTouchedOrderRejectTransaction = Transaction.MarketIfTouchedOrderRejectTransaction;
  export type TakeProfitOrderTransaction = Transaction.TakeProfitOrderTransaction;
  export type TakeProfitOrderRejectTransaction = Transaction.TakeProfitOrderRejectTransaction;
  export type StopLossOrderTransaction = Transaction.StopLossOrderTransaction;
  export type StopLossOrderRejectTransaction = Transaction.StopLossOrderRejectTransaction;
  export type GuaranteedStopLossOrderTransaction = Transaction.GuaranteedStopLossOrderTransaction;
  export type GuaranteedStopLossOrderRejectTransaction = Transaction.GuaranteedStopLossOrderRejectTransaction;
  export type TrailingStopLossOrderTransaction = Transaction.TrailingStopLossOrderTransaction;
  export type TrailingStopLossOrderRejectTransaction = Transaction.TrailingStopLossOrderRejectTransaction;
  export type OrderFillTransaction = Transaction.OrderFillTransaction;
  export type OrderCancelTransaction = Transaction.OrderCancelTransaction;
  export type OrderCancelRejectTransaction = Transaction.OrderCancelRejectTransaction;
  export type OrderClientExtensionsModifyTransaction = Transaction.OrderClientExtensionsModifyTransaction;
  export type OrderClientExtensionsModifyRejectTransaction = Transaction.OrderClientExtensionsModifyRejectTransaction;
  export type TradeClientExtensionsModifyTransaction = Transaction.TradeClientExtensionsModifyTransaction;
  export type TradeClientExtensionsModifyRejectTransaction = Transaction.TradeClientExtensionsModifyRejectTransaction;
  export type MarginCallEnterTransaction = Transaction.MarginCallEnterTransaction;
  export type MarginCallExtendTransaction = Transaction.MarginCallExtendTransaction;
  export type MarginCallExitTransaction = Transaction.MarginCallExitTransaction;
  export type DelayedTradeClosureTransaction = Transaction.DelayedTradeClosureTransaction;
  export type DailyFinancingTransaction = Transaction.DailyFinancingTransaction;
  export type DividendAdjustmentTransaction = Transaction.DividendAdjustmentTransaction;
  export type ResetResettablePLTransaction = Transaction.ResetResettablePLTransaction;
  export type ClientTag = Transaction.ClientTag;
  export type ClientComment = Transaction.ClientComment;
  export type ClientExtensions = Transaction.ClientExtensions;
  export type StopLossDetails = Transaction.StopLossDetails;
  export type GuaranteedStopLossDetails = Transaction.GuaranteedStopLossDetails;
  export type TrailingStopLossDetails = Transaction.TrailingStopLossDetails;
  export type TransactionID = Transaction.TransactionID;
  export type TransactionType = Transaction.TransactionType;
  export type FundingReason = Transaction.FundingReason;
  export type MarketOrderReason = Transaction.MarketOrderReason;
  export type FixedPriceOrderReason = Transaction.FixedPriceOrderReason;
  export type LimitOrderReason = Transaction.LimitOrderReason;
  export type StopOrderReason = Transaction.StopOrderReason;
  export type MarketIfTouchedOrderReason = Transaction.MarketIfTouchedOrderReason;
  export type TakeProfitOrderReason = Transaction.TakeProfitOrderReason;
  export type StopLossOrderReason = Transaction.StopLossOrderReason;
  export type GuaranteedStopLossOrderReason = Transaction.GuaranteedStopLossOrderReason;
  export type TrailingStopLossOrderReason = Transaction.TrailingStopLossOrderReason;
  export type OrderFillReason = Transaction.OrderFillReason;
  export type OrderCancelReason = Transaction.OrderCancelReason;
  export type OpenTradeDividendAdjustment = Transaction.OpenTradeDividendAdjustment;
  export type ClientID = Transaction.ClientID;
  export type TradeOpen = Transaction.TradeOpen;
  export type TradeReduce = Transaction.TradeReduce;
  export type MarketOrderTradeClose = Transaction.MarketOrderTradeClose;
  export type MarketOrderMarginCloseout = Transaction.MarketOrderMarginCloseout;
  export type MarketOrderMarginCloseoutReason = Transaction.MarketOrderMarginCloseoutReason;
  export type MarketOrderDelayedTradeClose = Transaction.MarketOrderDelayedTradeClose;
  export type MarketOrderPositionCloseout = Transaction.MarketOrderPositionCloseout;
  export type LiquidityRegenerationSchedule = Transaction.LiquidityRegenerationSchedule;
  export type LiquidityRegenerationScheduleStep = Transaction.LiquidityRegenerationScheduleStep;
  export type OpenTradeFinancing = Transaction.OpenTradeFinancing;
  export type PositionFinancing = Transaction.PositionFinancing;
  export type RequestID = Transaction.RequestID;
  export type ClientRequestID = Transaction.ClientRequestID;
  export type TransactionRejectReason = Transaction.TransactionRejectReason;
  export type TransactionFilter = Transaction.TransactionFilter;
  export type TransactionHeartbeat = Transaction.TransactionHeartbeat;
};